#!/bin/sh
# macOS DEPNotify Configuration Script
#   Version: 1.0
#   Author: Ryan Powell
#   Reference: https://github.com/rypowell1988/mac-management/blob/master/Install%20and%20Start%20DEPNotify


# SETUP SOME VARIABLES
   depnDir="/var/tmp/DEPNotify"
   depnLog="$depnDir/DEPNotify.log"
   current_user=$(/usr/bin/python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')
   logDir="/Library/University of Derby/Logs"
   logFile="$logDir/DEPNotify.txt"


# CREATE LOG FILE
   if [[ ! -d "$logDir" ]]; then 
      sudo mkdir -p "$logDir"
   fi
   if [[ -f "$logFile" ]]; then
      rm "$logFile"
   fi
   sudo chmod -R 777 "$logDir"
   sudo echo "Log Started" >> $logFile
   sudo chown root:wheel "$logFile"
   sudo chmod 777 "$logFile"


# WAIT FOR THE DOCK PROCESS TO HAVE STARTED - INDICATING THE USER SESSION HAS FULLY STARTED
   count=0
   dock_status=""
   echo "Waiting for Dock" >> $logFile
   while [[ "$dock_status" == "" ]]; do
      count=$((++count))
      echo "Try $count of a max of 10" >> $logFile
      sleep 5
      dock_status=$(pgrep -x Dock)
      if [[ $count == 10 ]]; then
         echo "Dock timeout reached" >> $logFile
         exit 2
      fi
   done
   echo "Dock process is now running" >> $logFile
   sleep 10

# DOES DEP NOTIFY EXIST?
   if [[ ! -d "$depnDir/DEPNotify.app" ]]; then
      echo "DEPNotify not found" >> $logFile
      exit 1
   fi


# SETUP DEPNOTIFY
   sleep 10
   echo "Current User = $current_user" >> $logFile
   echo "Killing Jamf Helper" >> $logFile
   sudo -u $current_user killall jamfHelper System\ Events
   echo "Start DEPNotify" >> $logFile
   sudo -u $current_user "$depnDir/DEPNotify.app/Contents/MacOS/DEPNotify" -path "$depnLog" -fullScreen &
   echo "Command: Image: $depnDir/DEPNotifyLogo.png" >> $depnLog
   echo "Command: MainTitle: macOS Setup " >> $depnLog
   echo "Command: MainText: We're setting up your Mac.  This might take a while depending on your connection to the network and how much software or how many updates are required. " >> $depnLog
   sleep 5


# LOOK FOR THE JAMF BINARY
   echo "Status: Looking for Jamf..." >> $depnLog
   if [[ ! -f /usr/local/jamf/bin/jamf ]]; then
      echo "Command: Alert: Setup cannot continue because this Mac doesn't appear to be enrolled" >> $depnLog
      echo "Command: Quit" >> $depnLog
      rm $depnLog
      exit 3
   fi


# AS WE INITIALISE, DISABLE SLEEP AND SCHEDULED UPDATES
   echo "Status: Initialising..." >> $depnLog
   sudo softwareupdate --schedule off
   caffeinate -d -i -m -s -u &
   caffeinate_pid=$!


# CONFIGURE HOSTNAME VIA JAMF POLICY TRIGGER
   echo "Status: Setting Hostname..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger script_sethostname
   sleep 1


# CONFIGURE GLOBAL DEFAULTS VIA JAMF POLICY TRIGGER
   echo "Status: Configuring defaults settings..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger script_globaldefaults
   sleep 1


# CONFIGURE USER TEMPLATE DEFAULTS VIA JAMF POLICY TRIGGER
   echo "Status: Configuring user template default settings..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger script_usertemplatedefaults
   sleep 1


# DEPLOYING TREND AV VIA JAMF POLICY TRIGGER
   echo "Status: Installing - Trend AntiVirus..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_trendav
   sleep 1


# DEPLOYING AVECTO DEFENDPOINT VIA JAMF POLICY TRIGGER
   echo "Status: Installing - Avecto DefendPoint..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_avecto
   sleep 1


# DEPLOYING NEXTHINK VIA JAMF POLICY TRIGGER
   echo "Status: Installing - Nexthink..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_nexthink
   sleep 1


# DEPLOYING MICROSOFT OFFICE VIA JAMF POLICY TRIGGER
   echo "Status: Installing - Microsoft Office..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_msoffice
   sleep 1


# DEPLOYING UOD WALLPAPER IMAGES VIA JAMF POLICY TRIGGER
   echo "Status: Installing - UoD Wallpaper..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger policy_defaultwallpaper
   sleep 1


# DEPLOYING UOD SCREENSAVER IMAGES VIA JAMF POLICY TRIGGER
   echo "Status: Installing - UoD Screensaver..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger script_uodscreensaver
   sleep 1
   
   
# DEPLOYING DEFAULT DOCK LAYOUT LAUNCHAGENT VIA JAMF POLICY TRIGGER
   echo "Status: Installing - UoD Dock Layout..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_docklayout
   sleep 1


# DEPLOYING SELF SERVICE VIA JAMF POLICY TRIGGER
   echo "Status: Installing - Self Service App..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger pkg_selfservice
   sleep 1


# CHECKING IN WITH JAMF
   echo "Status: Checking in with Jamf..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf recon
   sleep 30


# BINDING TO AD VIA JAMF POLICY TRIGGER
   echo "Status: Binding to Active Directory..." >> $depnLog
   sudo /usr/local/jamf/bin/jamf policy -trigger bindad
   sleep 10


# FINISHING UP - RE-ENABLING SCHEDULED UPDATE CHECKS, KILL CAFFEINATE AND CLEAR THE DEPNOTIFY LOG
   echo "Status: Finishing Up..." >> $depnLog


# SCHEDULE A REBOOT
   echo "DEPNotify complete, scheduling reboot" >> $logFile
   sudo shutdown -r +1 &
   sudo softwareupdate --schedule on
   kill "$caffeinate_pid"
   sudo rm -rf $depnDir
   sleep 40  


# DELETE THE POSTDEPSETUP USER AND REMOVE THE LAUNCHDAEMON
   echo "Clearing AutoLogin User and LaunchDaemon" >> $logFile
   sudo dscl . delete /Users/DEPSetupUser
   sudo rm /Library/LaunchDaemons/com.uod.postdepsetup.plist
   sudo rm /private/var/tmp/casperImaging.png
   sudo rm /private/var/tmp/postdepsetup_stdout.txt
   sudo rm /private/var/tmp/postdepsetup_stderr.txt
    
    
#EXIT SUCCESSFUL
   exit 0
